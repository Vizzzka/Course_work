===Функціональні вимоги до системи===
1. Процесуально-орієнтовані
* Система дозволяє користувачу зареєструватися та переглянути історію користування сервісом
* Створює можливим зберігання даних про гардероб користувача
* Дає доступ до веб-чату користувачів з певної області
* Можливість завантажування власного гардеробу через штрих-код одягу або самостійного класифікування одягу

2. Інформаційно-орієнтовані

* Надає поточну інформацію про погодні умови у вказаній області перебування
* Система інформує про релевантний одяг для відповідної подорожі
* Перегляд історії користування
* Перегляд інформації про збережений гардероб

===Нефункціональні вимоги до системи===
* Додаток може коректно відображатися на мобільних девайсах
* Система буде відображатися на більшості веб-браузерів
* Будь-яка взаємодія між користувачем і сервісом буде мати затримку не менше однієї секунди
* Тільки адміністратор може побачити персональну інформацію і має доступ до баз даних
* Система є доступною цілодобово і в будь-якому регіоні

===Опис даних які буде отримувати програма===
* Дані про погоду отримані за допомогою Open weather map API - json формат. Структура файлу:
{"coord": ...,
"sys": ...,
"weather": ...,
"main": ...,
"wind": ...,
"rain": ...,
"clouds": ...,
"dt": ...,
"id": ...,
"name": ...,
"cod": ...}
* Шар на карті який містить загальну метереологічну інформацію - html формат. Структура: <br /> html код та js скріпт який додає шари на мапу.
* Система примає і обробляє фото в форматі - png, jpg, bmp завдяки бібліотеці OpenCV.
* Google maps API генерує обєкт для відображення карти на html сторінці <br /> та при виконанні запитів для отримання шляхів на карті повертається json обєкт із відповідними даними. Структура: 

  "geocoded_waypoints" : [
     {
        "geocoder_status" : "OK",
        "place_id" : ...,
        "types" : ....
     },
     {
        "geocoder_status" : ...,
        "place_id" : ...,
        "types" : ...
     },
     {
        "geocoder_status" : ...,
        "place_id" : ....,
        "types" : ...
     },
     {
        "geocoder_status" : ...,
        "place_id" : ...,
        "types" : ...     }
  ],
  "routes": [ {
    "summary": ...,
    "legs": [ {
      "steps": [ {
        "travel_mode": ...,
        "start_location": {
          "lat": ...,
          "lng": ...
        },
        "end_location": {},
        "polyline": {},
        "duration": {},
        "distance": {}
      },
      ...
      ... additional steps of this leg
    ...
    ... additional legs of this route
      "duration": {},
      "distance": {},
      "start_location": {},
      "end_location": {},
      "start_address": ...,
      "end_address": ...
    } ],
    "warnings": ...,
    "waypoint_order": ...,
    "bounds": {
      "southwest": {},
      "northeast": {}
    }
  } ]
}
===Можливості модулів для роботи з даними===

'''Open Weather map API і обгортка Pyowm'''
* Доступ до поточних даних про погоду для будь-якого місця на Землі, включаючи понад 200 000 міст. Поточна погода часто оновлюється на основі глобальних моделей та даних з більш ніж 40 000 метеорологічних станцій. Дані доступні у форматі JSON, XML або HTML.
* Прогнозовані карти погоди. Ви можете вказати будь-яку дату та час протягом наступних 10 днів для отримання прогнозних карт погоди на вказаний час. Якщо ви не вкажете будь-яку дату і час, ви отримаєте поточну карту погоди.
* Методи, які будуть використовуватися: pyowm.OWM - створення owm обєкту, weather_at_coords(lat, long) - отримати дані про погоду за координатами, get_weather() - дістати дані про погоду з обєкту, MapLayerEnum.TEMPERATURE - задати тип мапи, owm.tile_manager(layer_name) - вказати шар мапи, get_tile(), persist() - зберегти зображення. Детальні приклади наведені у модулі: OpenWeatherMap_example.py, WeatherLayer_example.py

'''OpenCV '''
* бібліотека функцій та алгоритмів комп'ютерного зору, обробки зображень і чисельних алгоритмів загального призначення. Бібліотека надає засоби для обробки і аналізу вмісту зображень, у тому числі розпізнавання об'єктів на фотографіях (наприклад, осіб і фігур людей, тексту тощо), відстежування руху об'єктів, перетворення зображень, застосування методів машинного навчання і виявлення загальних елементів на різних зображеннях.
* Функції що використовувалися: cv2.imread() - зчитання зображення, cv2.cvtColor() - перетворення зображення в іншу кольорову гаму, cv2.blur() - розмиття зображення, cv2.threshold - фільтрація по граничному значенню. 

===Колективна робота над проектом===
«Спільний репозитАрій». Кожен з команди розробників має доступ та права на внесення змін
у репозитарій. Для розмежування версій та змін використовуються гілки (branches) - Django_ft & APIS_ft. По закінченню проекту дві гілки будуть злиті(merge).
Команди для роботи з репозитарієм:


    git clone
    git checkout 
    git add
    git commit
    git push

Насправді git clone працює як обгортка над деякими іншими командами. Вона створює нову директорію, переходить всередину і виконує git init для створення порожнього сховища, потім вона додає новий віддалений репозиторій (git remote add) для зазначеного URL (за замовчуванням він отримає ім'я origin), виконує git fetch для цього сховища та, нарешті, оновлює вашу робочу директорію до останнього коммітов, використовуючи git checkout.
